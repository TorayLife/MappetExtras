buildscript {
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.73'
        classpath "org.apache.maven.plugins:maven-resources-plugin:3.2.0"
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "org.spongepowered.mixin"

group = 'toraylife.untitledMappetAddon'
archivesBaseName = "untitledMappetAddon"
sourceCompatibility = targetCompatibility = "1.8"
compileJava.options.encoding = 'UTF-8'


version = project.version

var dev = "dev"

if (project.hasProperty("dev")) {
    version += "-" + dev
}

minecraft {

    mappings channel: 'snapshot', version: '20171003-1.12'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('src/main/resources/META-INF/mappet_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            jvmArgs("-Xmx1G")

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'mixins.untitledmappetaddon.json'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            jvmArgs("-Xmx1G")

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'mixins.untitledmappetaddon.json'
        }
    }
}

mixin {
    add sourceSets.main, "mixins.sweetmixin.refmap.json"
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    compileOnly files("run/libs/blockbuster-${blockbuster}-${mcversion}-dev.jar")
    compileOnly files("run/libs/metamorph-${metamorph}-${mcversion}-dev.jar")
    compileOnly files("run/libs/mappet-${mappet}-${mcversion}-dev.jar")
    compileOnly files("run/libs/mclib-${mclib}-${mcversion}-dev.jar")
    implementation("net.minecraftforge:mergetool:0.2.3.3") { force = true }

    implementation "org.spongepowered:mixin:0.8.3-SNAPSHOT"
    annotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime...
jar {
    manifest {
        attributes([
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs": "mixins.untitledmappetaddon.json",
                "FMLCorePluginContainsFMLMod": "true", // Не забываем указать эти два флага,
                "ForceLoadAsMod": "true",              // чтобы Forge нормально загрузил и мод, и миксины
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('shadowJar')
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


// BY DYAMO BOLSHOY UMNI MALCHEG
import org.apache.tools.ant.filters.ReplaceTokens

task processSource(type: Sync) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
            MAPPET     : mappet,
            MCLIB      : mclib,
            VERSION    : version
    ])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

shadowJar {
    dependencies {
    }
    archiveClassifier.set("")
}

task prepareAssets(type: Copy) {
    group = 'build'

    inputs.property 'version', project.version
    inputs.property "mcversion", mcversion

    project.version += "-" + mcversion

    from (sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // Replace version
        expand(project.properties)
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)

tasks.withType(Jar).all { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

/* Dev build */
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}